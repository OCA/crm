-
  Create claims to test their merge
-
  !record {model: crm.claim, id: test_crm_claim_01}:
    name: 'Test claim 1'
    date: !eval time.strftime('%Y-02-08 00:00:00')
    partner_id: base.res_partner_3
    stage_id: crm_claim.stage_claim1
    description: This is the description of the test claim 1.
    partner_phone: (373) 907-1009
    email_from: bill@example.com
    type_action: correction
-
  !record {model: crm.claim, id: test_crm_claim_02}:
    name: 'Test claim 2'
    date: !eval time.strftime('%Y-02-04 00:00:00')
    partner_id: base.res_partner_3
    stage_id: crm_claim.stage_claim5
    description: This is the description of the test claim 2.
    partner_phone: (373) 907-1009
    email_from: bill@example.com
-
  !record {model: crm.claim, id: test_crm_claim_03}:
    name: 'Test claim 3'
    date: !eval time.strftime('%Y-02-06 00:00:00')
    partner_id: base.res_partner_3
    stage_id: crm_claim.stage_claim3
    description: This is the description of the test claim 3.
    partner_phone: (373) 907-1010
    email_from: tom@example.com
    type_action: prevention
    team_id: sales_team.team_sales_department
-
  !python {model: crm.claim}: |
    self.write(cr, uid, [ref('test_crm_claim_01')], {
        'ref': 'res.partner,%d' % ref('base.res_partner_2')
    })
    claim_ids = [ref('test_crm_claim_01'),
                 ref('test_crm_claim_02'),
                 ref('test_crm_claim_03')]
    context.update({'active_model': 'crm.claim',
                    'active_ids': claim_ids,
                    'active_id': claim_ids[0]})
-
  I create a merge wizard and merge the claims together in the second claim
-
  !record {model: crm.claim.merge, id: merge_claim_wizard_01}:
-
  !python {model: crm.claim.merge}: |
    self.action_merge(cr, uid, [ref("merge_claim_wizard_01")], context=context)
-
  I check for the resulting merged claim (based on name and partner).
-
  !python {model: crm.claim}: |
    merge_id = self.search(cr, uid,
                           [('name', '=', 'Test claim 2'),
                            ('partner_id','=', ref("base.res_partner_3"))])
    assert merge_id, 'Failed to create the merged claim'
    claim = self.browse(cr, uid, merge_id[0])
    expected = ('This is the description of the test claim 2.\n\n'
                'This is the description of the test claim 3.\n\n'
                'This is the description of the test claim 1.')
    assert claim.description == expected, (
                                  'Description mismatch: when merging claims with '
                                  'different text values, these values should get '
                                  'concatenated and separated with line returns')
    expected = 'bill@example.com'
    assert claim.email_from == expected, (
                                  'Email mismatch, expected %s, got: %s' %
                                  (expected, claim.email_from))
    import time
    expected = time.strftime('%Y-02-04 00:00:00')
    assert claim.date == expected, (
                                  'Date mismatch, expected %s, got: %s' %
                                  (expected, claim.date))
    expected = ref('crm_claim.stage_claim5')
    assert claim.stage_id.id == expected, (
                                  'Stage mismatch, expected %s, got: %s' %
                                  (expected, claim.stage_id.id))
    expected = '(373) 907-1009'
    assert claim.partner_phone == expected, (
                                  'Phone mismatch, expected %s, got: %s' %
                                  (expected, claim.partner_phone))
    expected = ref('base.res_partner_2')
    assert (claim.ref.id == expected
             and claim.ref._model._name == 'res.partner'), (
                                  'Reference mismatch, expected a partner with id %s, got: %s' %
                                  (expected, claim.ref))
    expected = 'prevention'
    assert claim.type_action == expected, (
                                  'Action Type mismatch, expected %s, got: %s' %
                                  (expected, claim.type_action))
    expected = ref('sales_team.team_sales_department')
    assert claim.team_id.id == expected, (
                                  'Section mismatch, expected %s, got: %s' %
                                  (expected, claim.section_id.id))
-
  The other (tailing) claims shouldn't exist anymore.
-
  !python {model: crm.claim}: |
    tailing_claim = self.search(cr, uid, [('id', '=', ref('test_crm_claim_01'))])
    assert not tailing_claim, 'This tailing claim (id %s) should not exist anymore' % ref('test_crm_claim_01')

    tailing_claim = self.search(cr, uid, [('id', '=', ref('test_crm_claim_03'))])
    assert not tailing_claim, 'This tailing claim (id %s) should not exist anymore' % ref('test_crm_claim_03')
